var Opmo = require('./Opmo');
var Logger = require('./Logger');
var Motif = require('./Motif');
class Snippet extends Opmo {
  constructor(data){
    super(data);
  }

  setTimeSignature(time){
    this.time = time;
  }

  generate(){
    var opmo = this.genBody() + this.genFooter();
    super.exportFile(opmo);
  }

  genBody(){
    var fileName = this.name;
    Logger.genSnippet(fileName);
    var body = "";
    var omnList = "";

    for(var i = 0; i < this.time.length; i++){
      var content = this.content[i].split("-");
      var timeSig = this.time[i];
      body += this.genMotif(content, timeSig, i);
      omnList += `omn${i} `;
    }
    body += `(setf omn (assemble-seq '(${omnList})))\n`;

    return body;
  }

  genMotif(content, timeSig, index){
    var funcName = "";
    var args = [];
    for(var i = 0; i < content.length; i++){
      if(i === 0){
        funcName = content[i];
      } else {
        args.push(content[i]);
      }
    }

    var motif = new Motif(timeSig, funcName, args);
    return motif.generateOMN(index);
  }

  genFooter(){
    var name = this.name;
    var footer =
`(def-score ${name}
         (:key-signature 'atonal
          :time-signature (get-time-signature omn)
          :tempo 120)
(${name} :omn omn)
)`;
    return footer;
  }

}


module.exports = Snippet;
