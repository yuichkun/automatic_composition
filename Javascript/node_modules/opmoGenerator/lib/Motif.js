var motifList = require('./motifList');
var motifManipulation = require('./motifManipulation');
var evalMotif = motifManipulation.evalMotif;
var genVelocity = motifManipulation.genVelocity;


class Motif {

  constructor(omnIndex, timeSig, funcName, args, velocity){
    this.omnIndex = omnIndex;
    this.timeSig = timeSig;
    this.args = args;
    this.omn = "";
    // this.setFuncNameAndVelocity(source);
    this.funcName = funcName;
    this.velocity = velocity;
  }

  // setFuncNameAndVelocity(source){
  //   console.log("source is ", source);
  //   var temp = source.split('~');
  //   console.log("temp is ", temp);
  //   this.funcName = temp[0];
  //   if(temp.length > 1){
  //     this.velocity = temp[1];
  //   }
  // }

  generateOMN(){

    if(this.funcName == ''){
      this.genBlank();
    } else {
      var motif = motifList[this.funcName];
      this.handleMotif(motif);
      this.makeOMN();
    }
    return this.omn;
  }

  handleMotif(motif){
    var paramList = ['pitch', 'length'];
    paramList.forEach(
      (param)=>{
        var value = evalMotif(motif[param], this);
        // if(motif.hasOwnProperty(param)){
        //   value = evalMotif(motif[param], this);
        // } else {
        //   value = "nil";
        // }
        this.genParam(param, value);
      }
    );

    this.genParam("velocity", genVelocity(this.velocity));
    this.genParam("articulation", "nil");

  }

  genParam(param, value){
    this.omn += `(setf ${param} ${value})\n`;
  }

  genBlank(index){
    this.omn += `(setf omn${this.omnIndex} '(-${this.timeSig}))\n`
  }

  makeOMN(){
    this.omn += `(setf omn${this.omnIndex} (make-omn :pitch pitch :length length :velocity velocity :articulation articulation))\n`;
  }

}

module.exports = Motif;
