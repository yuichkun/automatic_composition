var motifList = require('./motifList');

class Motif {
  constructor(timeSig, funcName, args){
    this.timeSig = timeSig;
    this.funcName = funcName;
    this.args = args;
  }
  generateOMN(index){
    var omn = "";
    //if empty, make a blank measure
    if(this.funcName == ''){
      omn += `(setf omn${index} '(-${this.timeSig}))\n`;
      return omn;
    }

    var motifSnippet = motifList[this.funcName];
    var pitchSnippet = this.handleSnippet(motifSnippet.pitch);
    var lengthSnippet = this.handleSnippet(motifSnippet.length);
    var pitch = this.genPitch(pitchSnippet);
    var length = this.genLength(lengthSnippet);
    omn += pitch;
    omn += length;
    omn += `(setf omn${index} (make-omn :pitch pitch :length length))\n`;
    return omn;
  }

  handleSnippet(snippet){
    var ret = "";

    //Direct return
    if(snippet.hasOwnProperty('return')){
      return snippet.return;
    }
    //Evaluate and return
    else if(snippet.hasOwnProperty('returnEvaled')){
      if(snippet.hasOwnProperty('args')){
        var args = evalArgs.call(this, snippet.args);
        var func = snippet.returnEvaled + '(' + args + ')';
        ret += eval(func);
      } else {
        if(snippet.listed){
          ret += "\'(";
        }
        ret += eval(snippet.returnEvaled);
        if(snippet.listed){
          ret += ")";
        }
      }
    }

    //Calls a globally predefined opmo function
    else if (snippet.hasOwnProperty('func')){
      ret += `(${snippet.func} `;

      var args = [];
      args = evalArgs.call(this, snippet.args);
      args.forEach((arg)=>{
        ret += `${arg} `;
      });

      ret += `)`;
    }

    return ret;
  }

  genPitch(pitchSnippet){
    return `(setf pitch ${pitchSnippet})\n`;
  }

  genLength(lengthSnippet){
    return `(setf length ${lengthSnippet})\n`;
  }

}

function evalArgs(args){
  var ret = [];
  args.forEach((arg)=>{
    if(arg.match('this')){
      ret.push(eval(arg));
    }
    else {
      ret.push(arg);
    }
  });
  return ret;
}

function genChord(index, voice){
  return `(pitch-demix ${voice} harmony${index})`;
}


module.exports = Motif;
