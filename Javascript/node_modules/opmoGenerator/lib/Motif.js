var motifList = require('./motifList');

class Motif {
  constructor(timeSig, funcName, args){
    this.timeSig = timeSig;
    this.funcName = funcName;
    this.args = args;
  }
  generateOMN(index){
    var omn = "";
    if(this.funcName == ''){
      omn += `(setf omn${index} '(-${this.timeSig}))\n`;
      return omn;
    }

    var motifSnippet = motifList[this.funcName];
    var pitchSnippet = this.handleSnippet(motifSnippet.pitch);
    var lengthSnippet = this.handleSnippet(motifSnippet.length);
    var pitch = this.genPitch(pitchSnippet);
    var length = this.genLength(lengthSnippet);
    omn += pitch;
    omn += length;
    omn += `(setf omn${index} (make-omn :pitch pitch :length length))\n`;
    return omn;
  }

  handleSnippet(snippet){
    var ret = "";

    //Direct return
    if(snippet.hasOwnProperty('returnEvaled')){
      if(snippet.listed){
        ret += "\'(";
      }
      ret += eval(snippet.returnEvaled);
      if(snippet.listed){
        ret += ")";
      }
    }

    //Callbacks predefined function
    else if (snippet.hasOwnProperty('func')){
      ret += `(${snippet.func} `;

      var args = [];
      snippet.args.forEach((arg)=>{
        if(arg.match('this')){
          args.push(eval(arg));
        }
        else {
          args.push(arg);
        }
      });
      args.forEach((arg)=>{
        ret += `${arg} `;
      });
      ret += `)`;
    }

    return ret;
  }

  genPitch(pitchSnippet){
    return `(setf pitch ${pitchSnippet})\n`;
  }

  genLength(lengthSnippet){
    return `(setf length ${lengthSnippet})\n`;
  }

}


module.exports = Motif;
