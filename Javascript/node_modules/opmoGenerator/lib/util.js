module.exports =
`
(defun stretch (dur pitch &optional rest-p)
  (let '(ret nil) '(pitch-len nil) '(tupletized nil) '(section nil)
    (setf pitch-len (length (flatten pitch)))
    (setf tupletized (gen-repeat pitch-len (/ dur pitch-len)))

    (if (eq rest-p nil)
      (setf section (length tupletized))
      (setf section (gen-integer 0 (- rest-p 1)))
    )

    (setf ret (flatten (gen-pause (mclist (flatten tupletized)) :section section)))
    (return-from stretch ret)
  )
)

(defun ascend (size low high)
  (let '(wave nil)
    (setf wave (gen-sawtooth size 1 1))
    (return-from ascend (vector-to-pitch (list low high) wave))
  )
)
`;
